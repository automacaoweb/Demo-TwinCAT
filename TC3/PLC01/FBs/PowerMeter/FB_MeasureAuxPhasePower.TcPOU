<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MeasureAuxPhasePower" Id="{06348598-7e91-4792-bd16-f8cb344844f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MeasureAuxPhasePower
VAR_INPUT
END_VAR
VAR_OUTPUT
	convertedMeasure:ST_AuxConvertedMeasure;
	tLastHarmonicMeasureTime:TIME;
	lastiTime:FB_LastTimeSimple;
END_VAR
VAR
	power AT %I*:ST_AuxiliaryPowerValues;
	iChannel AT %Q*:USINT;
	iIndex AT %Q*:USINT;
	bMeasureTime:BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE power.channel OF
	0:
		CASE power.index OF
			0:
				iIndex := 2 ;
			2:
				convertedMeasure.sumOfEnergy := DINT_TO_LREAL(power.value) * 0.001;
				iIndex:=4;
				//F_DebugCount(1);
			4:
				convertedMeasure.frequency := DINT_TO_LREAL(power.value) * 0.1;
				iIndex:=5;
				//F_DebugCount(2);
			5:
				convertedMeasure.sumOfEnergyNeg := DINT_TO_LREAL(power.value) * 0.001;
				iIndex:=10;
				//F_DebugCount(3);				
			10:
				convertedMeasure.sumOfActivePower := DINT_TO_LREAL(power.value) * 0.01;
				iIndex:=11;
				//F_DebugCount(4);
			11:
				convertedMeasure.sumOfApparentPower := DINT_TO_LREAL(power.value)*0.01;
				iIndex:=12;
				//F_DebugCount(5);				
			12:
				convertedMeasure.sumOfReactivePower := DINT_TO_LREAL(power.value)*0.01;
				iIndex:=100;
				//F_DebugCount(6);				
			100:
				convertedMeasure.adcTemp := DINT_TO_LREAL(power.value);
				iIndex:=1;
				iChannel:=1;
				bMeasureTime:=TRUE;	//Inicia o tempo de leitura das harmonicas
				//F_DebugCount(7);
		END_CASE
	1..3:
		CASE power.index OF
			0:
				;
			100:
				;
			1..21:
				convertedMeasure.aHarmonicCurrentValue[power.channel,power.index]:=DINT_TO_LREAL(power.value)*0.000001;
				IF (power.index <21) AND (iIndex < 21) THEN
					iIndex:=iIndex+1;
				ELSIF (power.index = 21 ) AND (power.channel < 3) THEN
					iIndex:=1;
					IF power.channel = iChannel THEN
						iChannel:=iChannel+1;
					END_IF
				ELSIF (power.index = 21) AND (power.channel >=3) THEN
					iChannel:=1;		//Modificar
					iIndex:=51;
				END_IF
			51..71:
				convertedMeasure.aHarmonicCurrentRatio[power.channel,power.index-50]:=DINT_TO_LREAL(power.value)*0.01;
				IF (power.index <71) AND (iIndex < 71) THEN
					iIndex:=iIndex+1;
				ELSIF (power.index = 71 ) AND (power.channel < 3) THEN
					iIndex:=51;
					IF power.channel = iChannel THEN
						iChannel:=iChannel+1;
					END_IF
				ELSIF (power.index = 71) AND (power.channel >=3) THEN
					iChannel:=1;		//Modificar
					iIndex:=101;
				END_IF
			101..121:
				convertedMeasure.aHarmonicVoltageValue[power.channel,power.index-100]:=DINT_TO_LREAL(power.value)*0.0001;
				IF (power.index <121) AND (iIndex < 121) THEN
					iIndex:=iIndex+1;
				ELSIF (power.index = 121 ) AND (power.channel < 3) THEN
					iIndex:=101;
					IF power.channel = iChannel THEN
						iChannel:=iChannel+1;
					END_IF
				ELSIF (power.index = 121) AND (power.channel >=3) THEN
					iChannel:=1;		//Modificar
					iIndex:=151;
				END_IF

			151..171:
				convertedMeasure.aHarmonicVoltageRatio[power.channel,power.index-150]:=DINT_TO_LREAL(power.value)*0.01;
				IF (power.index <171) AND (iIndex < 171) THEN
					iIndex:=iIndex+1;
				ELSIF (power.index = 171 ) AND (power.channel < 3) THEN
					iIndex:=151;
					IF power.channel = iChannel THEN
						iChannel:=iChannel+1;
					END_IF
				ELSIF (power.index = 171) AND (power.channel >=3) THEN
					iChannel:=11;		
					iIndex:=0;
					bMeasureTime:=FALSE;					
				END_IF
			ELSE
				iChannel:=0;
				iIndex:=0;
				bMeasureTime:=FALSE;
		END_CASE
	11..13:
		CASE power.index OF
			0:
				IF iIndex = power.index THEN
					iIndex := iIndex+1;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].apparentPower := DINT_TO_LREAL(power.value)*0.01;
			1:
				IF iIndex = power.index THEN
					iIndex:=iIndex+1;
				END_IF	
				convertedMeasure.aAuxPowerValues[power.channel-10].reactivePower := DINT_TO_LREAL(power.value)*0.01;
			2:
				IF iIndex = power.index THEN
					iIndex:=iIndex+1;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].energy := DINT_TO_LREAL(power.value)*0.001;
			3:
				IF iIndex = power.index THEN
					iIndex:=iIndex+1;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].cosPhi := DINT_TO_LREAL(power.value)*0.001;
			4:
				IF iIndex = power.index THEN
					iIndex:=iIndex+1;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].frequency := DINT_TO_LREAL(power.value)*0.1;
			5:
				IF iIndex = power.index THEN
					iIndex:=iIndex+1;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].EnergyNegative := DINT_TO_LREAL(power.value)*0.001;
			6:
				IF iIndex = power.index THEN
					iIndex:=10;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].AngleBetweenPhase1 := DINT_TO_LREAL(power.value)*0.01;
			10:
				IF iIndex = power.index THEN
					iIndex:=11;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].current := DINT_TO_LREAL(power.value)*0.000001;
			11:
				IF iIndex = power.index THEN
					iIndex:=12;
				END_IF
				convertedMeasure.aAuxPowerValues[power.channel-10].voltage := DINT_TO_LREAL(power.value)*0.0001;
			12:
				convertedMeasure.aAuxPowerValues[power.channel-10].activePower := DINT_TO_LREAL(power.value)*0.01;
				IF power.channel = 13 THEN
					iIndex:=0;
					iChannel:=0;
				ELSE
					IF iChannel = power.channel AND power.channel < 13 THEN
						iChannel:=iChannel+1;
					END_IF
					iIndex:=0;
				END_IF
		END_CASE
END_CASE
lastiTime(bCountTime:= bMeasureTime, tLastTime=> tLastHarmonicMeasureTime);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>